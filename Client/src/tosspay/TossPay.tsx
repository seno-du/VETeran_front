import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import moment from 'moment-timezone';
import { useSelector } from 'react-redux';

interface Reserve {
    time: Date,
    pet: {
        icon: "üê∂",
        petBirth: Date,
        petColor: string,
        petGender: string,
        petImage: string,
        petMicrochip: string,
        petName: string,
        petNum: number,
        petSpecies: string,
        petWeight: number,
        userNum: number
    },
    note: string,
    doctor: {
        department: string,
        doctor: [
            managerName: string,
            managerNum: number,
        ],
        image: string,
        note: string,
        specialty: string
    },
}

function getKoreanTimeNow() {
    const koreanTime = moment().tz("Asia/Seoul").format("YYYY-MM-DD HH:mm:ss");
    return koreanTime;
}

const TossPay: React.FC<Reserve> = ({ time, pet, note, doctor }) => {
    console.log(time, pet, note, doctor);

    const clientKey = import.meta.env.VITE_TOSS_KEY; // ÌÜ†Ïä§ ÌÖåÏä§Ìä∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌÇ§
    const token = useSelector((state: any) => state.auth.token);
    const navigate = useNavigate();

    const [orderId, setOrderId] = useState('');
    const [userNum, setUserNum] = useState(0);

    const User = async () => {
        const response = await axios.get(`http://localhost:7124/back/api/user/one`, {
            headers: {
                Authorization: `Bearer ${token}`,
            }
        });
        setUserNum(response.data.userNum);
    }

    // Ïô∏Î∂Ä Ïä§ÌÅ¨Î¶ΩÌä∏ ÎèôÏ†Å Î°úÎìú
    const loadTossPaymentsScript = () => {
        return new Promise<void>((resolve, reject) => {
            const script = document.createElement('script');
            script.src = 'https://js.tosspayments.com/v1/payment';
            script.onload = () => resolve();
            script.onerror = () => reject(new Error('TossPayments SDK Î°úÎìú Ïã§Ìå®'));
            document.head.appendChild(script);
        });
    };

    // Í≤∞Ï†ú ÏöîÏ≤≠ Î∞è Í≤∞Ï†ú Ï≤òÎ¶¨
    const PaymentInsert = async (reserveNum: number) => {
        try {
            const response = await axios.post(`http://localhost:7124/back/api/paymentrequest`, {
                paymentMethod: "Í∞ÑÌé∏Í≤∞Ï†ú",
                amount: 20000,
                reserveNum: reserveNum,
            }, {
                headers: {
                    Authorization: `Bearer ${token}`,
                }
            });

            setOrderId(response.data.orderId);

            if (response.status === 200) {
                if (window.TossPayments) {
                    const tossPayments = window.TossPayments(clientKey);
                    tossPayments
                        .requestPayment('Ïπ¥Îìú', {
                            amount: 20000,
                            orderId: response.data.orderId,
                            orderName: 'VetÎ≥ëÏõê ÏòàÏïΩ',
                            customerEmail: response.data.userEmail,
                            customerName: response.data.userName,
                            customerMobilePhone: response.data.userPhone,
                        })
                        .then((response) => {
                            PaymentErrorCheck(response.paymentKey, reserveNum);
                        })
                        .catch((error) => {
                            console.error(error);
                            PaymentUpdateState("Ï∑®ÏÜåÎê®", "error", reserveNum, "Ï∑®ÏÜå");
                        });
                } else {
                    console.error('TossPayments SDKÍ∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                    PaymentUpdateState("Ï∑®ÏÜåÎê®", "error", reserveNum, "Ï∑®ÏÜå");
                }
            }
        } catch (error) {
            console.error(error);
            PaymentUpdateState("Ï∑®ÏÜåÎê®", "error", reserveNum, "Ï∑®ÏÜå");
        }
    }

    // Í≤∞Ï†ú Ïã†Ïö©Ïπ¥Îìú Ïù¥ÏÉÅÍ±∞Îûò ÌôïÏù∏
    const PaymentErrorCheck = async (paymentKey: string, reserveNum: number) => {

        console.log(paymentKey, reserveNum)
        try {
            await axios.post(`http://127.0.0.1:8000/payment/paymentandip`, {
                "Í±∞ÎûòÎ≤àÌò∏": orderId,
                "Í±∞ÎûòÎÇ¥Ïö©": "ÏòàÏïΩ",
                "Í∏àÏï°": 20000,
                "Í±∞ÎûòÎ∞©Î≤ï": "Ïπ¥ÎìúÍ≤∞Ï†ú",
                "Ìï¥Ïô∏Í±∞Îûò": false,
                "Í≤∞Ï†úÏùºÏãú": getKoreanTimeNow(),
                "userNum": userNum
            });

            PaymentUpdateState("ÏôÑÎ£åÎê®", paymentKey, reserveNum, "ÎåÄÍ∏∞");
        } catch (error) {
            console.error(error);
            PaymentUpdateState("Ï∑®ÏÜåÎê®", "error", reserveNum, "Ï∑®ÏÜå");
        }
    }

    // Í≤∞Ï†ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÏÑ±Í≥µ/Ïã§Ìå®)
    const PaymentUpdateState = async (state: string, paymentKey: string, reserveNum: number, reserveState: string) => {
        try {

            if (state === "ÏòàÏïΩÏ∑®ÏÜå") {
                alert("ÏòàÏïΩ ÏãúÎèÑÏ§ë Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.");
                return
            }

            await axios.post(`http://localhost:7124/back/api/paymentrequest/updateState`, {
                state: state,
                paymentKey: paymentKey,
                reserveNum: reserveNum,
            }, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            await axios.post('http://localhost:7124/back/api/reserve/updateState', { reserveStatus: reserveState, reserveNum: reserveNum }, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            await axios.post('http://localhost:7124/back/api/chart/save', { reserveNum }, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })

            if (state === "ÏôÑÎ£åÎê®" && reserveState === "ÎåÄÍ∏∞" && paymentKey !== null) {
                alert("ÏòàÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.");
                // time, pet, note, doctor
                console.log(doctor.department, doctor, time, pet, note)
                navigate("/reservation_completed", { state: { department: doctor.department, doctor: doctor, time: time, pet: pet, note: note } });
            } else {
                alert("ÏòàÏïΩÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.");
            }
        } catch (error) {
            console.error("Í≤∞Ï†ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®", error);
        }
    }

    // ÏòàÏïΩ ÏÉÅÌÉú Ï†ÄÏû•
    const ReserveSave = async () => {

        console.log(time)

        const requestData = {
            managerNum: doctor.doctor.managerNum,
            petNum: String(pet.petNum),
            reserveDate: `${time.selectedDate} ${time.selectedTime}:00`,
            reserveNotice: note || ""
        };
        console.log(requestData)
        const response = await axios.post("http://localhost:7124/back/api/reserve/reservation",
            requestData,
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

        if (response.status === 200) {
            PaymentInsert(response.data.reserveNum);
        } else {
            PaymentUpdateState("ÏòàÏïΩÏ∑®ÏÜå", "error", response.data.reserveNum, "Ï∑®ÏÜå");
        }
    };

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÎßàÏö¥Ìä∏ Îê† Îïå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ÏôÄ Í≤∞Ï†ú Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÎìú
    useEffect(() => {
        console.log("time:", time, "pet:", pet, "note:", note, "doctor:", doctor)
        console.log(token)
        User();
        loadTossPaymentsScript()
            .then(() => {
                // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÎê®
            })
            .catch((error) => {
                console.error(error);
            });
    }, []);

    return (
        <div>
            <button
                onClick={ReserveSave}
                className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700"
            >
                Í≤∞Ï†ú ÏßÑÌñâ
            </button>
        </div>
    );
};

export default TossPay;
